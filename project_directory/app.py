# -*- coding: utf-8 -*-
"""app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sWsJn0e-5wFSShKLOqxZfmS9u4rj6pRw
"""

from flask import Flask, render_template, request
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.decomposition import PCA

app = Flask(__name__)

# Load Datasets
user_data = pd.read_csv('user_data.csv')

# Encode categorical variables in User Data
le_user = LabelEncoder()
user_data['Gender'] = le_user.fit_transform(user_data['Gender'])
user_data['SustainableInvestments'] = le_user.fit_transform(user_data['SustainableInvestments'])
user_data['EducationLevel'] = le_user.fit_transform(user_data['EducationLevel'])
user_data['EmploymentStatus'] = le_user.fit_transform(user_data['EmploymentStatus'])
user_data['InvestmentHorizon'] = le_user.fit_transform(user_data['InvestmentHorizon'])
user_data['EthicalConsiderations'] = le_user.fit_transform(user_data['EthicalConsiderations'])

# Preprocess User Data
def preprocess_user_data(user_data):
    # Standardize numerical features
    scaler = StandardScaler()
    scaled_features = scaler.fit_transform(user_data[['Age', 'Income', 'Expenses', 'Savings', 'FinancialGoal', 'RiskAppetite', 'ESGScore']])
    user_data[['Age', 'Income', 'Expenses', 'Savings', 'FinancialGoal', 'RiskAppetite', 'ESGScore']] = scaled_features

    # Calculate the appropriate number of components for PCA
    n_components = min(user_data.shape[1], 3)  # Adjusted to use the minimum of features and 3

    # Apply PCA with adjusted number of components
    pca = PCA(n_components=n_components, svd_solver='full')
    pca_features = pca.fit_transform(user_data[['Age', 'Income', 'Expenses', 'Savings', 'FinancialGoal', 'RiskAppetite', 'ESGScore']])

    # Update the user_data DataFrame with PCA components
    for i in range(n_components):
        user_data[f'PCA{i+1}'] = pca_features[:, i]

    return user_data, pca  # Return the PCA object along with processed data

# Preprocess and train Linear Regression model for User Data
user_data_processed, pca = preprocess_user_data(user_data)  # Unpack the returned values

linreg_user_data = LinearRegression()
linreg_user_data.fit(user_data_processed[['PCA1', 'PCA2', 'PCA3']], user_data_processed['SustainableInvestments'])

# Load LabelEncoders for categorical variables
le_gender = LabelEncoder()
le_gender.fit(['Male', 'Female'])

le_yes_no = LabelEncoder()
le_yes_no.fit(['Yes', 'No'])

le_education = LabelEncoder()
le_education.fit(['High School', 'College', 'Graduate'])

le_employment = LabelEncoder()
le_employment.fit(['Employed', 'Self-Employed', 'Unemployed'])

le_investment_horizon = LabelEncoder()
le_investment_horizon.fit(['Short Term', 'Medium Term', 'Long Term'])

le_ethical_considerations = LabelEncoder()
le_ethical_considerations.fit(['Environmental Impact', 'Social Responsibility', 'Governance'])

# Routes
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # Collect user input from the form
        user_input = {
            'Gender': request.form['gender'],
            'Age': float(request.form['age']),
            'Income': float(request.form['income']),
            'Expenses': float(request.form['expenses']),
            'Savings': float(request.form['savings']),
            'FinancialGoal': float(request.form['financial_goal']),
            'RiskAppetite': float(request.form['risk_appetite']),
            'ESGScore': float(request.form['esg_score']),
            'SustainableInvestments': request.form['sustainable_investments'],
            'EducationLevel': request.form['education_level'],
            'EmploymentStatus': request.form['employment_status'],
            'InvestmentHorizon': request.form['investment_horizon'],
            'EthicalConsiderations': request.form['ethical_considerations']
        }

        # Process user input
        gender = le_gender.transform([user_input['Gender']])[0]
        sustainable_investments = le_yes_no.transform([user_input['SustainableInvestments']])[0]
        education_level = le_education.transform([user_input['EducationLevel']])[0]
        employment_status = le_employment.transform([user_input['EmploymentStatus']])[0]
        investment_horizon = le_investment_horizon.transform([user_input['InvestmentHorizon']])[0]
        ethical_considerations = le_ethical_considerations.transform([user_input['EthicalConsiderations']])[0]

        # Prepare input features for prediction using PCA components
        input_pca = np.array([[user_input['Age'], user_input['Income'], user_input['Expenses'], user_input['Savings'],
                               user_input['FinancialGoal'], user_input['RiskAppetite'], user_input['ESGScore']]])

        # Perform PCA transformation for user input
        input_pca_transformed = pca.transform(input_pca)

        # Perform prediction using the trained model with PCA components
        pca_pred = linreg_user_data.predict(input_pca_transformed)

        # Render the result template with predicted value
        return render_template('result.html', sustainable_investments='Yes' if pca_pred[0] > 0.5 else 'No')

    # Render the index template for GET requests
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)












